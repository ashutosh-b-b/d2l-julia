import{_ as n,c as e,o as l,aA as i,j as t,a as s}from"./chunks/framework.DjA5121Y.js";const L=JSON.parse('{"title":"Concise Implementation of Linear Regression","description":"","frontmatter":{},"headers":[],"relativePath":"CH3.Linear_Regression/LNN_5.md","filePath":"CH3.Linear_Regression/LNN_5.md","lastUpdated":null}'),o={name:"CH3.Linear_Regression/LNN_5.md"},r={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},p={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-2.287ex"},xmlns:"http://www.w3.org/2000/svg",width:"38.435ex",height:"5.705ex",role:"img",focusable:"false",viewBox:"0 -1510.8 16988.2 2521.7","aria-hidden":"true"},Q={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},h={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"6.526ex",height:"2.023ex",role:"img",focusable:"false",viewBox:"0 -812 2884.4 894","aria-hidden":"true"},d={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},T={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.707ex",height:"2.588ex",role:"img",focusable:"false",viewBox:"0 -1062 2080.4 1144","aria-hidden":"true"};function c(m,a,k,u,g,y){return l(),e("div",null,[a[15]||(a[15]=i(`<h1 id="sec_linear_concise" tabindex="-1">Concise Implementation of Linear Regression <a class="header-anchor" href="#sec_linear_concise" aria-label="Permalink to &quot;Concise Implementation of Linear Regression {#sec_linear_concise}&quot;">​</a></h1><p>Deep learning has witnessed a sort of Cambrian explosion over the past decade. The sheer number of techniques, applications and algorithms by far surpasses the progress of previous decades. This is due to a fortuitous combination of multiple factors, one of which is the powerful free tools offered by a number of open-source deep learning frameworks. Theano [<a href="/d2l-julia/previews/PR1/references#Bergstra_Breuleux_Bastien_ea_2010">14</a>], DistBelief [<a href="/d2l-julia/previews/PR1/references#Dean_Corrado_Monga_ea_2012">15</a>], and Caffe [<a href="/d2l-julia/previews/PR1/references#Jia_Shelhamer_Donahue_ea_2014">16</a>] arguably represent the first generation of such models that found widespread adoption. In contrast to earlier (seminal) works like SN2 (Simulateur Neuristique) [<a href="/d2l-julia/previews/PR1/references#Bottou_Le-Cun_1988">17</a>], which provided a Lisp-like programming experience, modern frameworks offer automatic differentiation and the convenience of Python. These frameworks allow us to automate and modularize the repetitive work of implementing gradient-based learning algorithms.</p><p>In :numref:<code>sec_linear_scratch</code>, we relied only on (i) tensors for data storage and linear algebra; and (ii) automatic differentiation for calculating gradients. In practice, because data iterators, loss functions, optimizers, and neural network layers are so common, modern libraries implement these components for us as well. In this section, we will show you how to implement the linear regression model**) from :numref:<code>sec_linear_scratch</code> (**concisely by using high-level APIs of deep learning frameworks.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Pkg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Pkg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">activate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../../d2lai&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d2lai</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flux</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  Activating project at \`/workspace/workspace/d2l-julia/d2lai\`</span></span></code></pre></div><h2 id="Defining-the-Model" tabindex="-1">Defining the Model <a class="header-anchor" href="#Defining-the-Model" aria-label="Permalink to &quot;Defining the Model {#Defining-the-Model}&quot;">​</a></h2><p>When we implemented linear regression from scratch in :numref:<code>sec_linear_scratch</code>, we defined our model parameters explicitly and coded up the calculations to produce output using basic linear algebra operations. You <em>should</em> know how to do this. But once your models get more complex, and once you have to do this nearly every day, you will be glad of the assistance. The situation is similar to coding up your own blog from scratch. Doing it once or twice is rewarding and instructive, but you would be a lousy web developer if you spent a month reinventing the wheel.</p><p>For standard operations, we can use a framework&#39;s predefined layers, which allow us to focus on the layers used to construct the model rather than worrying about their implementation. Recall the architecture of a single-layer network as described in <a href="/d2l-julia/previews/PR1/CH3.Linear_Regression/LNN_5#fig_single_neuron">Figure</a>. The layer is called <em>fully connected</em>, since each of its inputs is connected to each of its outputs by means of a matrix–vector multiplication.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LinearRegressionConcise{N} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> d2lai.AbstractModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    net</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">N</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d2lai</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forward</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRegressionConcise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">net</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h2 id="Defining-the-Loss-Function" tabindex="-1">Defining the Loss Function <a class="header-anchor" href="#Defining-the-Loss-Function" aria-label="Permalink to &quot;Defining the Loss Function {#Defining-the-Loss-Function}&quot;">​</a></h2><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d2lai</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRegressionConcise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y_pred, y)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Flux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Losses</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y_pred, y)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h2 id="Defining-the-Optimization-Algorithm" tabindex="-1">Defining the Optimization Algorithm <a class="header-anchor" href="#Defining-the-Optimization-Algorithm" aria-label="Permalink to &quot;Defining the Optimization Algorithm {#Defining-the-Optimization-Algorithm}&quot;">​</a></h2><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">opt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Descent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.03</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Descent(0.03)</span></span></code></pre></div><h2 id="Training" tabindex="-1">Training <a class="header-anchor" href="#Training" aria-label="Permalink to &quot;Training {#Training}&quot;">​</a></h2><p>You might have noticed that expressing our model through high-level APIs of a deep learning framework requires fewer lines of code. We did not have to allocate parameters individually, define our loss function, or implement minibatch SGD. Once we start working with much more complex models, the advantages of the high-level API will grow considerably.</p><p>Now that we have all the basic pieces in place, the training loop itself is the same as the one we implemented from scratch.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LinearRegressionConcise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">opt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Descent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.03</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SyntheticRegressionData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">trainer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Trainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, data, opt; max_epochs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d2lai</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(trainer)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌ Warning: Layer with Float32 parameters got Float64 input.</span></span>
<span class="line"><span>│   The input will be converted, but any earlier layers may be very slow.</span></span>
<span class="line"><span>│   layer = Dense(2 =&gt; 1)       # 3 parameters</span></span>
<span class="line"><span>│   summary(x) = &quot;2×32 Matrix{Float64}&quot;</span></span>
<span class="line"><span>└ @ Flux ~/.julia/packages/Flux/3711C/src/layers/stateless.jl:60</span></span></code></pre></div><div style="max-height:300px;overflow-y:auto;background:#111;color:#eee;padding:1em;border-radius:5px;"><pre>    [ Info: Train Loss: 0.5285112035993975, Val Loss: 0.3674669802544852
    [ Info: Train Loss: 0.009801724255686355, Val Loss: 0.007229238263031851
    [ Info: Train Loss: 0.00017841425281289386, Val Loss: 0.0002817269356486329</pre></div><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="600" height="400" viewBox="0 0 2400 1600"><defs><clipPath id="clip510"><rect x="0" y="0" width="2400" height="1600"></rect></clipPath></defs><path clip-path="url(#clip510)" d="M0 1600 L2400 1600 L2400 0 L0 0  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path><defs><clipPath id="clip511"><rect x="480" y="0" width="1681" height="1600"></rect></clipPath></defs><path clip-path="url(#clip510)" d="M187.803 1423.18 L2352.76 1423.18 L2352.76 47.2441 L187.803 47.2441  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path><defs><clipPath id="clip512"><rect x="187" y="47" width="2166" height="1377"></rect></clipPath></defs><polyline clip-path="url(#clip512)" style="stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-width:2;stroke-opacity:0.1;fill:none;" points="249.075,1423.18 249.075,47.2441 "></polyline><polyline clip-path="url(#clip512)" style="stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-width:2;stroke-opacity:0.1;fill:none;" points="759.678,1423.18 759.678,47.2441 "></polyline><polyline clip-path="url(#clip512)" style="stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-width:2;stroke-opacity:0.1;fill:none;" points="1270.28,1423.18 1270.28,47.2441 "></polyline><polyline clip-path="url(#clip512)" style="stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-width:2;stroke-opacity:0.1;fill:none;" points="1780.88,1423.18 1780.88,47.2441 "></polyline><polyline clip-path="url(#clip512)" style="stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-width:2;stroke-opacity:0.1;fill:none;" points="2291.48,1423.18 2291.48,47.2441 "></polyline><polyline clip-path="url(#clip512)" style="stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-width:2;stroke-opacity:0.1;fill:none;" points="187.803,924.894 2352.76,924.894 "></polyline><polyline clip-path="url(#clip512)" style="stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-width:2;stroke-opacity:0.1;fill:none;" points="187.803,326.811 2352.76,326.811 "></polyline><polyline clip-path="url(#clip510)" style="stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-width:4;stroke-opacity:1;fill:none;" points="187.803,1423.18 2352.76,1423.18 "></polyline><polyline clip-path="url(#clip510)" style="stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-width:4;stroke-opacity:1;fill:none;" points="249.075,1423.18 249.075,1404.28 "></polyline><polyline clip-path="url(#clip510)" style="stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-width:4;stroke-opacity:1;fill:none;" points="759.678,1423.18 759.678,1404.28 "></polyline><polyline clip-path="url(#clip510)" style="stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-width:4;stroke-opacity:1;fill:none;" points="1270.28,1423.18 1270.28,1404.28 "></polyline><polyline clip-path="url(#clip510)" style="stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-width:4;stroke-opacity:1;fill:none;" points="1780.88,1423.18 1780.88,1404.28 "></polyline><polyline clip-path="url(#clip510)" style="stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-width:4;stroke-opacity:1;fill:none;" points="2291.48,1423.18 2291.48,1404.28 "></polyline><path clip-path="url(#clip510)" d="M216.228 1481.64 L223.867 1481.64 L223.867 1455.28 L215.557 1456.95 L215.557 1452.69 L223.821 1451.02 L228.497 1451.02 L228.497 1481.64 L236.136 1481.64 L236.136 1485.58 L216.228 1485.58 L216.228 1481.64 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M245.58 1479.7 L250.464 1479.7 L250.464 1485.58 L245.58 1485.58 L245.58 1479.7 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M270.649 1454.1 Q267.038 1454.1 265.21 1457.66 Q263.404 1461.2 263.404 1468.33 Q263.404 1475.44 265.21 1479.01 Q267.038 1482.55 270.649 1482.55 Q274.284 1482.55 276.089 1479.01 Q277.918 1475.44 277.918 1468.33 Q277.918 1461.2 276.089 1457.66 Q274.284 1454.1 270.649 1454.1 M270.649 1450.39 Q276.46 1450.39 279.515 1455 Q282.594 1459.58 282.594 1468.33 Q282.594 1477.06 279.515 1481.67 Q276.46 1486.25 270.649 1486.25 Q264.839 1486.25 261.761 1481.67 Q258.705 1477.06 258.705 1468.33 Q258.705 1459.58 261.761 1455 Q264.839 1450.39 270.649 1450.39 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M727.328 1481.64 L734.967 1481.64 L734.967 1455.28 L726.657 1456.95 L726.657 1452.69 L734.921 1451.02 L739.597 1451.02 L739.597 1481.64 L747.235 1481.64 L747.235 1485.58 L727.328 1485.58 L727.328 1481.64 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M756.68 1479.7 L761.564 1479.7 L761.564 1485.58 L756.68 1485.58 L756.68 1479.7 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M771.796 1451.02 L790.152 1451.02 L790.152 1454.96 L776.078 1454.96 L776.078 1463.43 Q777.096 1463.08 778.115 1462.92 Q779.133 1462.73 780.152 1462.73 Q785.939 1462.73 789.319 1465.9 Q792.698 1469.08 792.698 1474.49 Q792.698 1480.07 789.226 1483.17 Q785.754 1486.25 779.434 1486.25 Q777.258 1486.25 774.99 1485.88 Q772.745 1485.51 770.337 1484.77 L770.337 1480.07 Q772.42 1481.2 774.643 1481.76 Q776.865 1482.32 779.342 1482.32 Q783.346 1482.32 785.684 1480.21 Q788.022 1478.1 788.022 1474.49 Q788.022 1470.88 785.684 1468.77 Q783.346 1466.67 779.342 1466.67 Q777.467 1466.67 775.592 1467.08 Q773.74 1467.5 771.796 1468.38 L771.796 1451.02 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M1241.52 1481.64 L1257.84 1481.64 L1257.84 1485.58 L1235.89 1485.58 L1235.89 1481.64 Q1238.56 1478.89 1243.14 1474.26 Q1247.74 1469.61 1248.93 1468.27 Q1251.17 1465.74 1252.05 1464.01 Q1252.95 1462.25 1252.95 1460.56 Q1252.95 1457.8 1251.01 1456.07 Q1249.09 1454.33 1245.99 1454.33 Q1243.79 1454.33 1241.33 1455.09 Q1238.9 1455.86 1236.12 1457.41 L1236.12 1452.69 Q1238.95 1451.55 1241.4 1450.97 Q1243.86 1450.39 1245.89 1450.39 Q1251.26 1450.39 1254.46 1453.08 Q1257.65 1455.77 1257.65 1460.26 Q1257.65 1462.39 1256.84 1464.31 Q1256.06 1466.2 1253.95 1468.8 Q1253.37 1469.47 1250.27 1472.69 Q1247.17 1475.88 1241.52 1481.64 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M1267.65 1479.7 L1272.54 1479.7 L1272.54 1485.58 L1267.65 1485.58 L1267.65 1479.7 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M1292.72 1454.1 Q1289.11 1454.1 1287.28 1457.66 Q1285.48 1461.2 1285.48 1468.33 Q1285.48 1475.44 1287.28 1479.01 Q1289.11 1482.55 1292.72 1482.55 Q1296.36 1482.55 1298.16 1479.01 Q1299.99 1475.44 1299.99 1468.33 Q1299.99 1461.2 1298.16 1457.66 Q1296.36 1454.1 1292.72 1454.1 M1292.72 1450.39 Q1298.53 1450.39 1301.59 1455 Q1304.67 1459.58 1304.67 1468.33 Q1304.67 1477.06 1301.59 1481.67 Q1298.53 1486.25 1292.72 1486.25 Q1286.91 1486.25 1283.83 1481.67 Q1280.78 1477.06 1280.78 1468.33 Q1280.78 1459.58 1283.83 1455 Q1286.91 1450.39 1292.72 1450.39 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M1752.62 1481.64 L1768.94 1481.64 L1768.94 1485.58 L1746.99 1485.58 L1746.99 1481.64 Q1749.65 1478.89 1754.24 1474.26 Q1758.84 1469.61 1760.03 1468.27 Q1762.27 1465.74 1763.15 1464.01 Q1764.05 1462.25 1764.05 1460.56 Q1764.05 1457.8 1762.11 1456.07 Q1760.19 1454.33 1757.09 1454.33 Q1754.89 1454.33 1752.43 1455.09 Q1750 1455.86 1747.22 1457.41 L1747.22 1452.69 Q1750.05 1451.55 1752.5 1450.97 Q1754.96 1450.39 1756.99 1450.39 Q1762.36 1450.39 1765.56 1453.08 Q1768.75 1455.77 1768.75 1460.26 Q1768.75 1462.39 1767.94 1464.31 Q1767.15 1466.2 1765.05 1468.8 Q1764.47 1469.47 1761.37 1472.69 Q1758.27 1475.88 1752.62 1481.64 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M1778.75 1479.7 L1783.64 1479.7 L1783.64 1485.58 L1778.75 1485.58 L1778.75 1479.7 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M1793.87 1451.02 L1812.22 1451.02 L1812.22 1454.96 L1798.15 1454.96 L1798.15 1463.43 Q1799.17 1463.08 1800.19 1462.92 Q1801.21 1462.73 1802.22 1462.73 Q1808.01 1462.73 1811.39 1465.9 Q1814.77 1469.08 1814.77 1474.49 Q1814.77 1480.07 1811.3 1483.17 Q1807.83 1486.25 1801.51 1486.25 Q1799.33 1486.25 1797.06 1485.88 Q1794.82 1485.51 1792.41 1484.77 L1792.41 1480.07 Q1794.49 1481.2 1796.71 1481.76 Q1798.94 1482.32 1801.41 1482.32 Q1805.42 1482.32 1807.76 1480.21 Q1810.09 1478.1 1810.09 1474.49 Q1810.09 1470.88 1807.76 1468.77 Q1805.42 1466.67 1801.41 1466.67 Q1799.54 1466.67 1797.66 1467.08 Q1795.81 1467.5 1793.87 1468.38 L1793.87 1451.02 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M2272.79 1466.95 Q2276.15 1467.66 2278.02 1469.93 Q2279.92 1472.2 2279.92 1475.53 Q2279.92 1480.65 2276.4 1483.45 Q2272.88 1486.25 2266.4 1486.25 Q2264.23 1486.25 2261.91 1485.81 Q2259.62 1485.39 2257.17 1484.54 L2257.17 1480.02 Q2259.11 1481.16 2261.43 1481.74 Q2263.74 1482.32 2266.26 1482.32 Q2270.66 1482.32 2272.95 1480.58 Q2275.27 1478.84 2275.27 1475.53 Q2275.27 1472.48 2273.12 1470.77 Q2270.99 1469.03 2267.17 1469.03 L2263.14 1469.03 L2263.14 1465.19 L2267.35 1465.19 Q2270.8 1465.19 2272.63 1463.82 Q2274.46 1462.43 2274.46 1459.84 Q2274.46 1457.18 2272.56 1455.77 Q2270.69 1454.33 2267.17 1454.33 Q2265.25 1454.33 2263.05 1454.75 Q2260.85 1455.16 2258.21 1456.04 L2258.21 1451.88 Q2260.87 1451.14 2263.19 1450.77 Q2265.52 1450.39 2267.58 1450.39 Q2272.91 1450.39 2276.01 1452.83 Q2279.11 1455.23 2279.11 1459.35 Q2279.11 1462.22 2277.47 1464.21 Q2275.82 1466.18 2272.79 1466.95 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M2288.79 1479.7 L2293.67 1479.7 L2293.67 1485.58 L2288.79 1485.58 L2288.79 1479.7 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M2313.86 1454.1 Q2310.25 1454.1 2308.42 1457.66 Q2306.61 1461.2 2306.61 1468.33 Q2306.61 1475.44 2308.42 1479.01 Q2310.25 1482.55 2313.86 1482.55 Q2317.49 1482.55 2319.3 1479.01 Q2321.12 1475.44 2321.12 1468.33 Q2321.12 1461.2 2319.3 1457.66 Q2317.49 1454.1 2313.86 1454.1 M2313.86 1450.39 Q2319.67 1450.39 2322.72 1455 Q2325.8 1459.58 2325.8 1468.33 Q2325.8 1477.06 2322.72 1481.67 Q2319.67 1486.25 2313.86 1486.25 Q2308.05 1486.25 2304.97 1481.67 Q2301.91 1477.06 2301.91 1468.33 Q2301.91 1459.58 2304.97 1455 Q2308.05 1450.39 2313.86 1450.39 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M1190.47 1548.76 L1190.47 1551.62 L1163.54 1551.62 Q1163.92 1557.67 1167.17 1560.85 Q1170.45 1564 1176.27 1564 Q1179.65 1564 1182.8 1563.17 Q1185.98 1562.35 1189.1 1560.69 L1189.1 1566.23 Q1185.95 1567.57 1182.64 1568.27 Q1179.33 1568.97 1175.92 1568.97 Q1167.39 1568.97 1162.4 1564 Q1157.43 1559.04 1157.43 1550.57 Q1157.43 1541.82 1162.14 1536.69 Q1166.88 1531.54 1174.91 1531.54 Q1182.1 1531.54 1186.27 1536.18 Q1190.47 1540.8 1190.47 1548.76 M1184.61 1547.04 Q1184.55 1542.23 1181.91 1539.37 Q1179.3 1536.5 1174.97 1536.5 Q1170.07 1536.5 1167.11 1539.27 Q1164.18 1542.04 1163.73 1547.07 L1184.61 1547.04 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M1205.75 1562.7 L1205.75 1581.6 L1199.86 1581.6 L1199.86 1532.4 L1205.75 1532.4 L1205.75 1537.81 Q1207.59 1534.62 1210.39 1533.1 Q1213.23 1531.54 1217.14 1531.54 Q1223.63 1531.54 1227.68 1536.69 Q1231.75 1541.85 1231.75 1550.25 Q1231.75 1558.65 1227.68 1563.81 Q1223.63 1568.97 1217.14 1568.97 Q1213.23 1568.97 1210.39 1567.44 Q1207.59 1565.88 1205.75 1562.7 M1225.67 1550.25 Q1225.67 1543.79 1223 1540.13 Q1220.36 1536.44 1215.71 1536.44 Q1211.06 1536.44 1208.39 1540.13 Q1205.75 1543.79 1205.75 1550.25 Q1205.75 1556.71 1208.39 1560.4 Q1211.06 1564.07 1215.71 1564.07 Q1220.36 1564.07 1223 1560.4 Q1225.67 1556.71 1225.67 1550.25 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M1255.27 1536.5 Q1250.56 1536.5 1247.82 1540.19 Q1245.09 1543.85 1245.09 1550.25 Q1245.09 1556.65 1247.79 1560.34 Q1250.53 1564 1255.27 1564 Q1259.95 1564 1262.69 1560.31 Q1265.43 1556.62 1265.43 1550.25 Q1265.43 1543.92 1262.69 1540.23 Q1259.95 1536.5 1255.27 1536.5 M1255.27 1531.54 Q1262.91 1531.54 1267.27 1536.5 Q1271.63 1541.47 1271.63 1550.25 Q1271.63 1559 1267.27 1564 Q1262.91 1568.97 1255.27 1568.97 Q1247.6 1568.97 1243.24 1564 Q1238.91 1559 1238.91 1550.25 Q1238.91 1541.47 1243.24 1536.5 Q1247.6 1531.54 1255.27 1531.54 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M1306.99 1533.76 L1306.99 1539.24 Q1304.51 1537.87 1302 1537.2 Q1299.51 1536.5 1296.97 1536.5 Q1291.27 1536.5 1288.12 1540.13 Q1284.97 1543.73 1284.97 1550.25 Q1284.97 1556.78 1288.12 1560.4 Q1291.27 1564 1296.97 1564 Q1299.51 1564 1302 1563.33 Q1304.51 1562.63 1306.99 1561.26 L1306.99 1566.68 Q1304.54 1567.82 1301.9 1568.39 Q1299.29 1568.97 1296.33 1568.97 Q1288.28 1568.97 1283.54 1563.91 Q1278.79 1558.85 1278.79 1550.25 Q1278.79 1541.53 1283.57 1536.53 Q1288.37 1531.54 1296.71 1531.54 Q1299.42 1531.54 1302 1532.11 Q1304.57 1532.65 1306.99 1533.76 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M1346.81 1546.53 L1346.81 1568.04 L1340.95 1568.04 L1340.95 1546.72 Q1340.95 1541.66 1338.98 1539.14 Q1337.01 1536.63 1333.06 1536.63 Q1328.32 1536.63 1325.58 1539.65 Q1322.84 1542.68 1322.84 1547.9 L1322.84 1568.04 L1316.96 1568.04 L1316.96 1518.52 L1322.84 1518.52 L1322.84 1537.93 Q1324.95 1534.72 1327.78 1533.13 Q1330.64 1531.54 1334.37 1531.54 Q1340.51 1531.54 1343.66 1535.36 Q1346.81 1539.14 1346.81 1546.53 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M1381.22 1533.45 L1381.22 1538.98 Q1378.74 1537.71 1376.06 1537.07 Q1373.39 1536.44 1370.52 1536.44 Q1366.16 1536.44 1363.97 1537.77 Q1361.8 1539.11 1361.8 1541.79 Q1361.8 1543.82 1363.36 1545 Q1364.92 1546.15 1369.63 1547.2 L1371.64 1547.64 Q1377.88 1548.98 1380.49 1551.43 Q1383.13 1553.85 1383.13 1558.21 Q1383.13 1563.17 1379.18 1566.07 Q1375.27 1568.97 1368.39 1568.97 Q1365.53 1568.97 1362.41 1568.39 Q1359.32 1567.85 1355.88 1566.74 L1355.88 1560.69 Q1359.13 1562.38 1362.28 1563.24 Q1365.43 1564.07 1368.52 1564.07 Q1372.66 1564.07 1374.88 1562.66 Q1377.11 1561.23 1377.11 1558.65 Q1377.11 1556.27 1375.49 1554.99 Q1373.9 1553.72 1368.45 1552.54 L1366.42 1552.07 Q1360.97 1550.92 1358.56 1548.56 Q1356.14 1546.18 1356.14 1542.04 Q1356.14 1537.01 1359.7 1534.27 Q1363.27 1531.54 1369.82 1531.54 Q1373.07 1531.54 1375.93 1532.01 Q1378.8 1532.49 1381.22 1533.45 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><polyline clip-path="url(#clip510)" style="stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-width:4;stroke-opacity:1;fill:none;" points="187.803,1423.18 187.803,47.2441 "></polyline><polyline clip-path="url(#clip510)" style="stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-width:4;stroke-opacity:1;fill:none;" points="187.803,924.894 206.701,924.894 "></polyline><polyline clip-path="url(#clip510)" style="stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-width:4;stroke-opacity:1;fill:none;" points="187.803,326.811 206.701,326.811 "></polyline><path clip-path="url(#clip510)" d="M51.6634 944.687 L59.3023 944.687 L59.3023 918.321 L50.9921 919.988 L50.9921 915.728 L59.256 914.062 L63.9319 914.062 L63.9319 944.687 L71.5707 944.687 L71.5707 948.622 L51.6634 948.622 L51.6634 944.687 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M91.0151 917.14 Q87.404 917.14 85.5753 920.705 Q83.7697 924.247 83.7697 931.376 Q83.7697 938.483 85.5753 942.048 Q87.404 945.589 91.0151 945.589 Q94.6493 945.589 96.4548 942.048 Q98.2835 938.483 98.2835 931.376 Q98.2835 924.247 96.4548 920.705 Q94.6493 917.14 91.0151 917.14 M91.0151 913.437 Q96.8252 913.437 99.8808 918.043 Q102.959 922.627 102.959 931.376 Q102.959 940.103 99.8808 944.71 Q96.8252 949.293 91.0151 949.293 Q85.2049 949.293 82.1262 944.71 Q79.0707 940.103 79.0707 931.376 Q79.0707 922.627 82.1262 918.043 Q85.2049 913.437 91.0151 913.437 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M102.959 907.538 L127.071 907.538 L127.071 910.735 L102.959 910.735 L102.959 907.538 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M138.544 918.014 L151.803 918.014 L151.803 921.211 L133.973 921.211 L133.973 918.014 Q136.136 915.776 139.86 912.014 Q143.603 908.234 144.562 907.143 Q146.387 905.093 147.101 903.683 Q147.835 902.253 147.835 900.88 Q147.835 898.642 146.255 897.231 Q144.694 895.821 142.174 895.821 Q140.387 895.821 138.393 896.442 Q136.418 897.062 134.162 898.322 L134.162 894.486 Q136.456 893.564 138.45 893.094 Q140.443 892.624 142.098 892.624 Q146.462 892.624 149.057 894.805 Q151.653 896.987 151.653 900.636 Q151.653 902.366 150.994 903.927 Q150.355 905.469 148.644 907.576 Q148.173 908.121 145.653 910.735 Q143.133 913.331 138.544 918.014 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M81.0976 346.603 L88.7364 346.603 L88.7364 320.238 L80.4263 321.905 L80.4263 317.645 L88.6901 315.979 L93.366 315.979 L93.366 346.603 L101.005 346.603 L101.005 350.539 L81.0976 350.539 L81.0976 346.603 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M120.449 319.057 Q116.838 319.057 115.009 322.622 Q113.204 326.164 113.204 333.293 Q113.204 340.4 115.009 343.965 Q116.838 347.506 120.449 347.506 Q124.083 347.506 125.889 343.965 Q127.718 340.4 127.718 333.293 Q127.718 326.164 125.889 322.622 Q124.083 319.057 120.449 319.057 M120.449 315.354 Q126.259 315.354 129.315 319.96 Q132.394 324.543 132.394 333.293 Q132.394 342.02 129.315 346.627 Q126.259 351.21 120.449 351.21 Q114.639 351.21 111.56 346.627 Q108.505 342.02 108.505 333.293 Q108.505 324.543 111.56 319.96 Q114.639 315.354 120.449 315.354 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M142.098 297.55 Q139.164 297.55 137.679 300.446 Q136.212 303.324 136.212 309.116 Q136.212 314.89 137.679 317.787 Q139.164 320.664 142.098 320.664 Q145.051 320.664 146.518 317.787 Q148.004 314.89 148.004 309.116 Q148.004 303.324 146.518 300.446 Q145.051 297.55 142.098 297.55 M142.098 294.54 Q146.819 294.54 149.302 298.283 Q151.803 302.007 151.803 309.116 Q151.803 316.207 149.302 319.95 Q146.819 323.674 142.098 323.674 Q137.378 323.674 134.876 319.95 Q132.394 316.207 132.394 309.116 Q132.394 302.007 134.876 298.283 Q137.378 294.54 142.098 294.54 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><polyline clip-path="url(#clip512)" style="stroke:#009af9;stroke-linecap:round;stroke-linejoin:round;stroke-width:4;stroke-opacity:1;fill:none;" points="249.075,86.1857 1270.28,606.639 2291.48,1120.24 "></polyline><polyline clip-path="url(#clip512)" style="stroke:#e26f46;stroke-linecap:round;stroke-linejoin:round;stroke-width:4;stroke-opacity:1;fill:none;" points="249.075,415.86 1270.28,931.78 2291.48,1384.24 "></polyline><path clip-path="url(#clip510)" d="M1842.06 248.629 L2280.59 248.629 L2280.59 93.1086 L1842.06 93.1086  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path><polyline clip-path="url(#clip510)" style="stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-width:4;stroke-opacity:1;fill:none;" points="1842.06,248.629 2280.59,248.629 2280.59,93.1086 1842.06,93.1086 1842.06,248.629 "></polyline><polyline clip-path="url(#clip510)" style="stroke:#009af9;stroke-linecap:round;stroke-linejoin:round;stroke-width:4;stroke-opacity:1;fill:none;" points="1866.11,144.949 2010.44,144.949 "></polyline><path clip-path="url(#clip510)" d="M2041.91 128.942 L2041.91 136.303 L2050.68 136.303 L2050.68 139.613 L2041.91 139.613 L2041.91 153.687 Q2041.91 156.858 2042.76 157.761 Q2043.64 158.664 2046.31 158.664 L2050.68 158.664 L2050.68 162.229 L2046.31 162.229 Q2041.37 162.229 2039.5 160.4 Q2037.62 158.548 2037.62 153.687 L2037.62 139.613 L2034.5 139.613 L2034.5 136.303 L2037.62 136.303 L2037.62 128.942 L2041.91 128.942 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M2071.31 140.284 Q2070.59 139.868 2069.73 139.682 Q2068.9 139.474 2067.88 139.474 Q2064.27 139.474 2062.32 141.835 Q2060.4 144.173 2060.4 148.571 L2060.4 162.229 L2056.12 162.229 L2056.12 136.303 L2060.4 136.303 L2060.4 140.331 Q2061.75 137.969 2063.9 136.835 Q2066.05 135.678 2069.13 135.678 Q2069.57 135.678 2070.1 135.747 Q2070.63 135.794 2071.28 135.909 L2071.31 140.284 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M2087.56 149.196 Q2082.39 149.196 2080.4 150.377 Q2078.41 151.557 2078.41 154.405 Q2078.41 156.673 2079.89 158.016 Q2081.4 159.335 2083.97 159.335 Q2087.51 159.335 2089.64 156.835 Q2091.79 154.312 2091.79 150.145 L2091.79 149.196 L2087.56 149.196 M2096.05 147.437 L2096.05 162.229 L2091.79 162.229 L2091.79 158.293 Q2090.33 160.655 2088.16 161.789 Q2085.98 162.9 2082.83 162.9 Q2078.85 162.9 2076.49 160.678 Q2074.15 158.432 2074.15 154.682 Q2074.15 150.307 2077.07 148.085 Q2080.01 145.863 2085.82 145.863 L2091.79 145.863 L2091.79 145.446 Q2091.79 142.507 2089.85 140.909 Q2087.93 139.289 2084.43 139.289 Q2082.21 139.289 2080.1 139.821 Q2078 140.354 2076.05 141.419 L2076.05 137.483 Q2078.39 136.581 2080.59 136.141 Q2082.79 135.678 2084.87 135.678 Q2090.5 135.678 2093.27 138.594 Q2096.05 141.511 2096.05 147.437 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M2104.82 136.303 L2109.08 136.303 L2109.08 162.229 L2104.82 162.229 L2104.82 136.303 M2104.82 126.21 L2109.08 126.21 L2109.08 131.604 L2104.82 131.604 L2104.82 126.21 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M2139.55 146.581 L2139.55 162.229 L2135.29 162.229 L2135.29 146.719 Q2135.29 143.039 2133.85 141.21 Q2132.42 139.382 2129.55 139.382 Q2126.1 139.382 2124.11 141.581 Q2122.12 143.78 2122.12 147.576 L2122.12 162.229 L2117.83 162.229 L2117.83 136.303 L2122.12 136.303 L2122.12 140.331 Q2123.64 137.993 2125.7 136.835 Q2127.79 135.678 2130.49 135.678 Q2134.96 135.678 2137.25 138.456 Q2139.55 141.21 2139.55 146.581 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M2167.74 170.099 L2167.74 173.409 L2143.11 173.409 L2143.11 170.099 L2167.74 170.099 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M2171.74 126.21 L2176 126.21 L2176 162.229 L2171.74 162.229 L2171.74 126.21 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M2194.96 139.289 Q2191.54 139.289 2189.55 141.974 Q2187.55 144.636 2187.55 149.289 Q2187.55 153.942 2189.52 156.627 Q2191.51 159.289 2194.96 159.289 Q2198.36 159.289 2200.36 156.604 Q2202.35 153.918 2202.35 149.289 Q2202.35 144.682 2200.36 141.997 Q2198.36 139.289 2194.96 139.289 M2194.96 135.678 Q2200.52 135.678 2203.69 139.289 Q2206.86 142.9 2206.86 149.289 Q2206.86 155.655 2203.69 159.289 Q2200.52 162.9 2194.96 162.9 Q2189.38 162.9 2186.21 159.289 Q2183.06 155.655 2183.06 149.289 Q2183.06 142.9 2186.21 139.289 Q2189.38 135.678 2194.96 135.678 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M2230.45 137.067 L2230.45 141.094 Q2228.64 140.169 2226.7 139.706 Q2224.75 139.243 2222.67 139.243 Q2219.5 139.243 2217.9 140.215 Q2216.33 141.187 2216.33 143.131 Q2216.33 144.613 2217.46 145.469 Q2218.6 146.303 2222.02 147.067 L2223.48 147.391 Q2228.02 148.363 2229.92 150.145 Q2231.84 151.905 2231.84 155.076 Q2231.84 158.687 2228.97 160.793 Q2226.12 162.9 2221.12 162.9 Q2219.04 162.9 2216.77 162.483 Q2214.52 162.09 2212.02 161.28 L2212.02 156.881 Q2214.38 158.108 2216.67 158.733 Q2218.97 159.335 2221.21 159.335 Q2224.22 159.335 2225.84 158.317 Q2227.46 157.275 2227.46 155.4 Q2227.46 153.664 2226.28 152.738 Q2225.12 151.812 2221.17 150.956 L2219.68 150.608 Q2215.73 149.775 2213.97 148.062 Q2212.21 146.326 2212.21 143.317 Q2212.21 139.659 2214.8 137.669 Q2217.39 135.678 2222.16 135.678 Q2224.52 135.678 2226.61 136.025 Q2228.69 136.372 2230.45 137.067 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M2255.15 137.067 L2255.15 141.094 Q2253.34 140.169 2251.4 139.706 Q2249.45 139.243 2247.37 139.243 Q2244.2 139.243 2242.6 140.215 Q2241.03 141.187 2241.03 143.131 Q2241.03 144.613 2242.16 145.469 Q2243.3 146.303 2246.72 147.067 L2248.18 147.391 Q2252.72 148.363 2254.61 150.145 Q2256.54 151.905 2256.54 155.076 Q2256.54 158.687 2253.67 160.793 Q2250.82 162.9 2245.82 162.9 Q2243.73 162.9 2241.47 162.483 Q2239.22 162.09 2236.72 161.28 L2236.72 156.881 Q2239.08 158.108 2241.37 158.733 Q2243.67 159.335 2245.91 159.335 Q2248.92 159.335 2250.54 158.317 Q2252.16 157.275 2252.16 155.4 Q2252.16 153.664 2250.98 152.738 Q2249.82 151.812 2245.86 150.956 L2244.38 150.608 Q2240.42 149.775 2238.67 148.062 Q2236.91 146.326 2236.91 143.317 Q2236.91 139.659 2239.5 137.669 Q2242.09 135.678 2246.86 135.678 Q2249.22 135.678 2251.3 136.025 Q2253.39 136.372 2255.15 137.067 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><polyline clip-path="url(#clip510)" style="stroke:#e26f46;stroke-linecap:round;stroke-linejoin:round;stroke-width:4;stroke-opacity:1;fill:none;" points="1866.11,196.789 2010.44,196.789 "></polyline><path clip-path="url(#clip510)" d="M2034.5 188.143 L2039.01 188.143 L2047.12 209.902 L2055.22 188.143 L2059.73 188.143 L2050.01 214.069 L2044.22 214.069 L2034.5 188.143 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M2077.39 201.036 Q2072.23 201.036 2070.24 202.217 Q2068.25 203.397 2068.25 206.245 Q2068.25 208.513 2069.73 209.856 Q2071.24 211.175 2073.81 211.175 Q2077.35 211.175 2079.48 208.675 Q2081.63 206.152 2081.63 201.985 L2081.63 201.036 L2077.39 201.036 M2085.89 199.277 L2085.89 214.069 L2081.63 214.069 L2081.63 210.133 Q2080.17 212.495 2078 213.629 Q2075.82 214.74 2072.67 214.74 Q2068.69 214.74 2066.33 212.518 Q2063.99 210.272 2063.99 206.522 Q2063.99 202.147 2066.91 199.925 Q2069.85 197.703 2075.66 197.703 L2081.63 197.703 L2081.63 197.286 Q2081.63 194.347 2079.68 192.749 Q2077.76 191.129 2074.27 191.129 Q2072.05 191.129 2069.94 191.661 Q2067.83 192.194 2065.89 193.259 L2065.89 189.323 Q2068.23 188.421 2070.43 187.981 Q2072.62 187.518 2074.71 187.518 Q2080.33 187.518 2083.11 190.434 Q2085.89 193.351 2085.89 199.277 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M2094.66 178.05 L2098.92 178.05 L2098.92 214.069 L2094.66 214.069 L2094.66 178.05 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M2127.53 221.939 L2127.53 225.249 L2102.9 225.249 L2102.9 221.939 L2127.53 221.939 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M2131.54 178.05 L2135.8 178.05 L2135.8 214.069 L2131.54 214.069 L2131.54 178.05 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M2154.75 191.129 Q2151.33 191.129 2149.34 193.814 Q2147.35 196.476 2147.35 201.129 Q2147.35 205.782 2149.31 208.467 Q2151.3 211.129 2154.75 211.129 Q2158.16 211.129 2160.15 208.444 Q2162.14 205.758 2162.14 201.129 Q2162.14 196.522 2160.15 193.837 Q2158.16 191.129 2154.75 191.129 M2154.75 187.518 Q2160.31 187.518 2163.48 191.129 Q2166.65 194.74 2166.65 201.129 Q2166.65 207.495 2163.48 211.129 Q2160.31 214.74 2154.75 214.74 Q2149.18 214.74 2146 211.129 Q2142.86 207.495 2142.86 201.129 Q2142.86 194.74 2146 191.129 Q2149.18 187.518 2154.75 187.518 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M2190.24 188.907 L2190.24 192.934 Q2188.43 192.009 2186.49 191.546 Q2184.55 191.083 2182.46 191.083 Q2179.29 191.083 2177.69 192.055 Q2176.12 193.027 2176.12 194.971 Q2176.12 196.453 2177.25 197.309 Q2178.39 198.143 2181.81 198.907 L2183.27 199.231 Q2187.81 200.203 2189.71 201.985 Q2191.63 203.745 2191.63 206.916 Q2191.63 210.527 2188.76 212.633 Q2185.91 214.74 2180.91 214.74 Q2178.83 214.74 2176.56 214.323 Q2174.31 213.93 2171.81 213.12 L2171.81 208.721 Q2174.18 209.948 2176.47 210.573 Q2178.76 211.175 2181 211.175 Q2184.01 211.175 2185.63 210.157 Q2187.25 209.115 2187.25 207.24 Q2187.25 205.504 2186.07 204.578 Q2184.92 203.652 2180.96 202.796 L2179.48 202.448 Q2175.52 201.615 2173.76 199.902 Q2172 198.166 2172 195.157 Q2172 191.499 2174.59 189.509 Q2177.18 187.518 2181.95 187.518 Q2184.31 187.518 2186.4 187.865 Q2188.48 188.212 2190.24 188.907 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip510)" d="M2214.94 188.907 L2214.94 192.934 Q2213.13 192.009 2211.19 191.546 Q2209.24 191.083 2207.16 191.083 Q2203.99 191.083 2202.39 192.055 Q2200.82 193.027 2200.82 194.971 Q2200.82 196.453 2201.95 197.309 Q2203.09 198.143 2206.51 198.907 L2207.97 199.231 Q2212.51 200.203 2214.41 201.985 Q2216.33 203.745 2216.33 206.916 Q2216.33 210.527 2213.46 212.633 Q2210.61 214.74 2205.61 214.74 Q2203.53 214.74 2201.26 214.323 Q2199.01 213.93 2196.51 213.12 L2196.51 208.721 Q2198.87 209.948 2201.17 210.573 Q2203.46 211.175 2205.7 211.175 Q2208.71 211.175 2210.33 210.157 Q2211.95 209.115 2211.95 207.24 Q2211.95 205.504 2210.77 204.578 Q2209.61 203.652 2205.66 202.796 L2204.17 202.448 Q2200.22 201.615 2198.46 199.902 Q2196.7 198.166 2196.7 195.157 Q2196.7 191.499 2199.29 189.509 Q2201.88 187.518 2206.65 187.518 Q2209.01 187.518 2211.1 187.865 Q2213.18 188.212 2214.94 188.907 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path></svg><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(LinearRegressionConcise{Dense{typeof(identity), Matrix{Float32}, Vector{Float32}}}(Dense(2 =&gt; 1)), (val_loss = [0.00029441198543635357, 0.00032685511703581856, 0.00034953779412912495, 0.0003339858449917922, 0.000363652779279678, 0.0003238800810076286, 0.0003354708605756992, 0.0002933743959921633, 0.0003247936637506058, 0.0002479933867462904  …  0.0002817704456362504, 0.00021349322630722425, 0.00019684240958221702, 0.00030345155823706025, 0.000214075675876277, 0.00036942509393279513, 0.0002903322578708252, 0.00034681583857292767, 0.00027830931508335635, 0.0002817269356486329], val_acc = nothing))</span></span></code></pre></div><p>Below, we compare the model parameters learned by training on finite data and the actual parameters that generated our dataset. To access parameters, we access the weights and bias of the layer that we need. As in our implementation from scratch, note that our estimated parameters are close to their true counterparts.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_w</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRegressionConcise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">net</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">weight</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRegressionConcise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">net</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bias</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>get_b (generic function with 1 method)</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get_w</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1×2 Matrix{Float32}:</span></span>
<span class="line"><span> 1.99837  -3.39384</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get_b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1-element Vector{Float32}:</span></span>
<span class="line"><span> 4.28833</span></span></code></pre></div><h2 id="Summary" tabindex="-1">Summary <a class="header-anchor" href="#Summary" aria-label="Permalink to &quot;Summary {#Summary}&quot;">​</a></h2><p>This section contains the first implementation of a deep network (in this book) to tap into the conveniences afforded by modern deep learning frameworks, such as MXNet [<a href="/d2l-julia/previews/PR1/references#Chen_Li_Li_ea_2015">18</a>], JAX [<a href="/d2l-julia/previews/PR1/references#Frostig_Johnson_Leary_2018">19</a>], PyTorch [<a href="/d2l-julia/previews/PR1/references#Paszke_Gross_Massa_ea_2019">20</a>], and Tensorflow [<a href="/d2l-julia/previews/PR1/references#Abadi_Barham_Chen_ea_2016">21</a>]. We used framework defaults for loading data, defining a layer, a loss function, an optimizer and a training loop. Whenever the framework provides all necessary features, it is generally a good idea to use them, since the library implementations of these components tend to be heavily optimized for performance and properly tested for reliability. At the same time, try not to forget that these modules <em>can</em> be implemented directly. This is especially important for aspiring researchers who wish to live on the leading edge of model development, where you will be inventing new components that cannot possibly exist in any current library.</p><h2 id="Exercises" tabindex="-1">Exercises <a class="header-anchor" href="#Exercises" aria-label="Permalink to &quot;Exercises {#Exercises}&quot;">​</a></h2>`,32)),t("ol",null,[a[10]||(a[10]=t("li",null,[t("p",null,"How would you need to change the learning rate if you replace the aggregate loss over the minibatch with an average over the loss on the minibatch?")],-1)),t("li",null,[t("p",null,[a[2]||(a[2]=s("Review the framework documentation to see which loss functions are provided. In particular, replace the squared loss with Huber's robust loss function. That is, use the loss function ")),t("mjx-container",r,[(l(),e("svg",p,a[0]||(a[0]=[i('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(298,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(687,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1177,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(1621.7,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(523,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(2389.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(3055.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="mrow" transform="translate(4111.7,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z" style="stroke-width:3;"></path></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,751.9)"><g data-mml-node="mtd"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(990.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(1990.4,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(523,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(2757.9,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(3258.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mfrac" transform="translate(4258.3,0)"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(245.1,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><rect width="603.8" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mtd" transform="translate(6102.1,0)"><g data-mml-node="mtext"><path data-c="A0" d="" style="stroke-width:3;"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(250,0)" style="stroke-width:3;"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(528,0)" style="stroke-width:3;"></path><path data-c="A0" d="" transform="translate(834,0)" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1084,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1362,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2074.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(3074.4,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(523,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(3841.9,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(4397.7,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5453.5,0)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-658.1)"><g data-mml-node="mtd"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(421.9,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z" style="stroke-width:3;"></path></g></g><rect width="957.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1197.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1586.3,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2298.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(3298.8,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(523,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z" style="stroke-width:3;"></path></g></g><g data-mml-node="msup" transform="translate(4066.2,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(422,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mtd" transform="translate(6102.1,0)"><g data-mml-node="mtext"><path data-c="A0" d="" style="stroke-width:3;"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(250,0)" style="stroke-width:3;"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(750,0)" style="stroke-width:3;"></path><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1139,0)" style="stroke-width:3;"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1695,0)" style="stroke-width:3;"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(2139,0)" style="stroke-width:3;"></path><path data-c="77" d="M90 368Q84 378 76 380T40 385H18V431H24L43 430Q62 430 84 429T116 428Q206 428 221 431H229V385H215Q177 383 177 368Q177 367 221 239L265 113L339 328L333 345Q323 374 316 379Q308 384 278 385H258V431H264Q270 428 348 428Q439 428 454 431H461V385H452Q404 385 404 369Q404 366 418 324T449 234T481 143L496 100L537 219Q579 341 579 347Q579 363 564 373T530 385H522V431H529Q541 428 624 428Q692 428 698 431H703V385H697Q696 385 691 385T682 384Q635 377 619 334L559 161Q546 124 528 71Q508 12 503 1T487 -11H479Q460 -11 456 -4Q455 -3 407 133L361 267Q359 263 266 -4Q261 -11 243 -11H238Q225 -11 220 -3L90 368Z" transform="translate(2531,0)" style="stroke-width:3;"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(3253,0)" style="stroke-width:3;"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(3531,0)" style="stroke-width:3;"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(3925,0)" style="stroke-width:3;"></path></g></g></g></g><g data-mml-node="mo" transform="translate(12876.6,0) translate(0 250)"></g></g></g></g>',1)]))),a[1]||(a[1]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"l"),t("mo",{stretchy:"false"},"("),t("mi",null,"y"),t("mo",null,","),t("msup",null,[t("mi",null,"y"),t("mo",{"data-mjx-alternate":"1"},"′")]),t("mo",{stretchy:"false"},")"),t("mo",null,"="),t("mrow",{"data-mjx-texclass":"INNER"},[t("mo",{"data-mjx-texclass":"OPEN"},"{"),t("mtable",{columnalign:"left left",columnspacing:"1em",rowspacing:".2em"},[t("mtr",null,[t("mtd",null,[t("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),t("mi",null,"y"),t("mo",null,"−"),t("msup",null,[t("mi",null,"y"),t("mo",{"data-mjx-alternate":"1"},"′")]),t("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),t("mo",null,"−"),t("mfrac",null,[t("mi",null,"σ"),t("mn",null,"2")])]),t("mtd",null,[t("mtext",null," if "),t("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),t("mi",null,"y"),t("mo",null,"−"),t("msup",null,[t("mi",null,"y"),t("mo",{"data-mjx-alternate":"1"},"′")]),t("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),t("mo",null,">"),t("mi",null,"σ")])]),t("mtr",null,[t("mtd",null,[t("mfrac",null,[t("mn",null,"1"),t("mrow",null,[t("mn",null,"2"),t("mi",null,"σ")])]),t("mo",{stretchy:"false"},"("),t("mi",null,"y"),t("mo",null,"−"),t("msup",null,[t("mi",null,"y"),t("mo",{"data-mjx-alternate":"1"},"′")]),t("msup",null,[t("mo",{stretchy:"false"},")"),t("mn",null,"2")])]),t("mtd",null,[t("mtext",null," otherwise")])])]),t("mo",{"data-mjx-texclass":"CLOSE",fence:"true",stretchy:"true",symmetric:"true"})])])],-1))])])]),a[11]||(a[11]=t("li",null,[t("p",null,"How do you access the gradient of the weights of the model?")],-1)),a[12]||(a[12]=t("li",null,[t("p",null,"What is the effect on the solution if you change the learning rate and the number of epochs? Does it keep on improving?")],-1)),a[13]||(a[13]=t("li",null,[t("p",null,"How does the solution change as you vary the amount of data generated?")],-1)),t("li",null,[t("p",null,[a[7]||(a[7]=s("Plot the estimation error for ")),t("mjx-container",Q,[(l(),e("svg",h,a[3]||(a[3]=[i('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D430" d="M624 444Q636 441 722 441Q797 441 800 444H805V382H741L593 11Q592 10 590 8T586 4T584 2T581 0T579 -2T575 -3T571 -3T567 -4T561 -4T553 -4H542Q525 -4 518 6T490 70Q474 110 463 137L415 257L367 137Q357 111 341 72Q320 17 313 7T289 -4H277Q259 -4 253 -2T238 11L90 382H25V444H32Q47 441 140 441Q243 441 261 444H270V382H222L310 164L382 342L366 382H303V444H310Q322 441 407 441Q508 441 523 444H531V382H506Q481 382 481 380Q482 376 529 259T577 142L674 382H617V444H624Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(415.5,18) translate(-250 0)"><path data-c="5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(1053.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2053.4,0)"><g data-mml-node="mi"><path data-c="1D430" d="M624 444Q636 441 722 441Q797 441 800 444H805V382H741L593 11Q592 10 590 8T586 4T584 2T581 0T579 -2T575 -3T571 -3T567 -4T561 -4T553 -4H542Q525 -4 518 6T490 70Q474 110 463 137L415 257L367 137Q357 111 341 72Q320 17 313 7T289 -4H277Q259 -4 253 -2T238 11L90 382H25V444H32Q47 441 140 441Q243 441 261 444H270V382H222L310 164L382 342L366 382H303V444H310Q322 441 407 441Q508 441 523 444H531V382H506Q481 382 481 380Q482 376 529 259T577 142L674 382H617V444H624Z" style="stroke-width:3;"></path></g></g></g></g>',1)]))),a[4]||(a[4]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mrow",{"data-mjx-texclass":"ORD"},[t("mover",null,[t("mrow",{"data-mjx-texclass":"ORD"},[t("mi",{mathvariant:"bold"},"w")]),t("mo",{stretchy:"false"},"^")])]),t("mo",null,"−"),t("mrow",{"data-mjx-texclass":"ORD"},[t("mi",{mathvariant:"bold"},"w")])])],-1))]),a[8]||(a[8]=s(" and ")),t("mjx-container",d,[(l(),e("svg",T,a[5]||(a[5]=[i('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(214.5,268) translate(-250 0)"><path data-c="5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(651.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1651.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g></g></g>',1)]))),a[6]||(a[6]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mrow",{"data-mjx-texclass":"ORD"},[t("mover",null,[t("mi",null,"b"),t("mo",{stretchy:"false"},"^")])]),t("mo",null,"−"),t("mi",null,"b")])],-1))]),a[9]||(a[9]=s(" as a function of the amount of data. Hint: increase the amount of data logarithmically rather than linearly, i.e., 5, 10, 20, 50, ..., 10,000 rather than 1000, 2000, ..., 10,000."))])]),a[14]||(a[14]=t("li",null,[t("p",null,"Why is the suggestion in the hint appropriate?")],-1))]),a[16]||(a[16]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div>',1))])}const w=n(o,[["render",c]]);export{L as __pageData,w as default};
